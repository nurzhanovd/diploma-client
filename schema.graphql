directive @cypher(statement: String) on FIELD_DEFINITION

directive @relation(name: String, direction: _RelationDirections, from: String, to: String) on FIELD_DEFINITION | OBJECT

directive @additionalLabels(labels: [String]) on OBJECT

directive @MutationMeta(relationship: String, from: String, to: String) on FIELD_DEFINITION

directive @neo4j_ignore on FIELD_DEFINITION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type _AddNodeChildesPayload {
  from: Node
  to: Node
}

type _AddNodeParentPayload {
  from: Node
  to: Node
}

type _AddTagForPayload {
  from: Tag
  to: Node
}

input _AuthErrorFilter {
  AND: [_AuthErrorFilter!]
  OR: [_AuthErrorFilter!]
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
}

input _AuthErrorInput {
  key: String!
}

enum _AuthErrorOrdering {
  key_asc
  key_desc
  value_asc
  value_desc
  _id_asc
  _id_desc
}

input _AuthPayloadFilter {
  AND: [_AuthPayloadFilter!]
  OR: [_AuthPayloadFilter!]
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
}

input _AuthPayloadInput {
  token: String!
}

enum _AuthPayloadOrdering {
  token_asc
  token_desc
  uuid_asc
  uuid_desc
  email_asc
  email_desc
  username_asc
  username_desc
  _id_asc
  _id_desc
}

input _FileFilter {
  AND: [_FileFilter!]
  OR: [_FileFilter!]
  filename: ID
  filename_not: ID
  filename_in: [ID!]
  filename_not_in: [ID!]
  filename_contains: ID
  filename_not_contains: ID
  filename_starts_with: ID
  filename_not_starts_with: ID
  filename_ends_with: ID
  filename_not_ends_with: ID
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
}

input _FileInput {
  filename: ID!
}

enum _FileOrdering {
  filename_asc
  filename_desc
  mimetype_asc
  mimetype_desc
  encoding_asc
  encoding_desc
  _id_asc
  _id_desc
}

input _GenericSearchResultFilter {
  AND: [_GenericSearchResultFilter!]
  OR: [_GenericSearchResultFilter!]
  uuid: ID
  uuid_not: ID
  uuid_in: [ID!]
  uuid_not_in: [ID!]
  uuid_contains: ID
  uuid_not_contains: ID
  uuid_starts_with: ID
  uuid_not_starts_with: ID
  uuid_ends_with: ID
  uuid_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
}

input _GenericSearchResultInput {
  uuid: ID!
}

enum _GenericSearchResultOrdering {
  uuid_asc
  uuid_desc
  title_asc
  title_desc
  description_asc
  description_desc
  score_asc
  score_desc
  type_asc
  type_desc
  _id_asc
  _id_desc
}

type _MergeNodeChildesPayload {
  from: Node
  to: Node
}

type _MergeNodeParentPayload {
  from: Node
  to: Node
}

type _MergeTagForPayload {
  from: Tag
  to: Node
}

type _Neo4jDate {
  year: Int
  month: Int
  day: Int
  formatted: String
}

input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int
  formatted: String
}

type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

type _Neo4jLocalDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jLocalTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jPoint {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

input _Neo4jPointDistanceFilter {
  point: _Neo4jPointInput!
  distance: Float!
}

input _Neo4jPointInput {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _NodeFilter {
  AND: [_NodeFilter!]
  OR: [_NodeFilter!]
  uuid: ID
  uuid_not: ID
  uuid_in: [ID!]
  uuid_not_in: [ID!]
  uuid_contains: ID
  uuid_not_contains: ID
  uuid_starts_with: ID
  uuid_not_starts_with: ID
  uuid_ends_with: ID
  uuid_not_ends_with: ID
  root: Boolean
  root_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  childes: _NodeFilter
  childes_not: _NodeFilter
  childes_in: [_NodeFilter!]
  childes_not_in: [_NodeFilter!]
  childes_some: _NodeFilter
  childes_none: _NodeFilter
  childes_single: _NodeFilter
  childes_every: _NodeFilter
  parent: _NodeFilter
  parent_not: _NodeFilter
  parent_in: [_NodeFilter!]
  parent_not_in: [_NodeFilter!]
}

input _NodeInput {
  uuid: ID!
}

enum _NodeOrdering {
  uuid_asc
  uuid_desc
  root_asc
  root_desc
  title_asc
  title_desc
  description_asc
  description_desc
  isComplete_asc
  isComplete_desc
  _id_asc
  _id_desc
}

enum _RelationDirections {
  IN
  OUT
}

input _RelationFilter {
  AND: [_RelationFilter!]
  OR: [_RelationFilter!]
  from: ID
  from_not: ID
  from_in: [ID!]
  from_not_in: [ID!]
  from_contains: ID
  from_not_contains: ID
  from_starts_with: ID
  from_not_starts_with: ID
  from_ends_with: ID
  from_not_ends_with: ID
  to: ID
  to_not: ID
  to_in: [ID!]
  to_not_in: [ID!]
  to_contains: ID
  to_not_contains: ID
  to_starts_with: ID
  to_not_starts_with: ID
  to_ends_with: ID
  to_not_ends_with: ID
}

input _RelationInput {
  from: ID!
}

enum _RelationOrdering {
  from_asc
  from_desc
  to_asc
  to_desc
  _id_asc
  _id_desc
}

type _RemoveNodeChildesPayload {
  from: Node
  to: Node
}

type _RemoveNodeParentPayload {
  from: Node
  to: Node
}

type _RemoveTagForPayload {
  from: Tag
  to: Node
}

input _TagFilter {
  AND: [_TagFilter!]
  OR: [_TagFilter!]
  uuid: ID
  uuid_not: ID
  uuid_in: [ID!]
  uuid_not_in: [ID!]
  uuid_contains: ID
  uuid_not_contains: ID
  uuid_starts_with: ID
  uuid_not_starts_with: ID
  uuid_ends_with: ID
  uuid_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  for: _NodeFilter
  for_not: _NodeFilter
  for_in: [_NodeFilter!]
  for_not_in: [_NodeFilter!]
  for_some: _NodeFilter
  for_none: _NodeFilter
  for_single: _NodeFilter
  for_every: _NodeFilter
}

input _TagInput {
  uuid: ID!
}

enum _TagOrdering {
  uuid_asc
  uuid_desc
  title_asc
  title_desc
  _id_asc
  _id_desc
}

input _TreeNodePayloadFilter {
  AND: [_TreeNodePayloadFilter!]
  OR: [_TreeNodePayloadFilter!]
}

enum _TreeNodePayloadOrdering {
  _id_asc
  _id_desc
}

type AuthError {
  key: String!
  value: String!
  _id: String
}

type AuthPayload {
  token: String
  uuid: String
  email: String
  username: String
  errors(first: Int, offset: Int, orderBy: [_AuthErrorOrdering], filter: _AuthErrorFilter): [AuthError]
  _id: String
}

type File {
  filename: ID!
  mimetype: String!
  encoding: String!
  _id: String
}

type GenericSearchResult {
  uuid: ID!
  title: String
  description: String
  score: Int!
  type: String
  _id: String
}

type Mutation {
  DeleteFileAndRemoveFromDb(filename: ID!): File
  UploadFile(file: Upload!): File!
  SignUp(username: String!, email: String!, password: String!, confirmPassword: String!): AuthPayload
  SignIn(login: String!, password: String!): AuthPayload
  CreateRoadMap(roadMapRelation: [String], nodeRoadMapRelation: [String]): String
  FulfillNode(uuid: ID!): Boolean
  CreateFile(filename: ID, mimetype: String!, encoding: String!): File
  UpdateFile(filename: ID!, mimetype: String, encoding: String): File
  DeleteFile(filename: ID!): File
  MergeFile(filename: ID!, mimetype: String, encoding: String): File
  AddNodeChildes(from: _NodeInput!, to: _NodeInput!): _AddNodeChildesPayload
  RemoveNodeChildes(from: _NodeInput!, to: _NodeInput!): _RemoveNodeChildesPayload
  MergeNodeChildes(from: _NodeInput!, to: _NodeInput!): _MergeNodeChildesPayload
  AddNodeParent(from: _NodeInput!, to: _NodeInput!): _AddNodeParentPayload
  RemoveNodeParent(from: _NodeInput!, to: _NodeInput!): _RemoveNodeParentPayload
  MergeNodeParent(from: _NodeInput!, to: _NodeInput!): _MergeNodeParentPayload
  CreateNode(uuid: ID, root: Boolean, title: String!, description: String, content: [String]): Node
  UpdateNode(uuid: ID!, root: Boolean, title: String, description: String, content: [String]): Node
  DeleteNode(uuid: ID!): Node
  MergeNode(uuid: ID!, root: Boolean, title: String, description: String, content: [String]): Node
  AddTagFor(from: _TagInput!, to: _NodeInput!): _AddTagForPayload
  RemoveTagFor(from: _TagInput!, to: _NodeInput!): _RemoveTagForPayload
  MergeTagFor(from: _TagInput!, to: _NodeInput!): _MergeTagForPayload
  CreateTag(uuid: ID, title: String): Tag
  UpdateTag(uuid: ID!, title: String): Tag
  DeleteTag(uuid: ID!): Tag
  MergeTag(uuid: ID!, title: String): Tag
  CreateRelation(from: ID, to: ID!): Relation
  UpdateRelation(from: ID!, to: ID): Relation
  DeleteRelation(from: ID!): Relation
  MergeRelation(from: ID!, to: ID): Relation
  CreateTreeNodePayload: TreeNodePayload
  DeleteTreeNodePayload: TreeNodePayload
  CreateGenericSearchResult(uuid: ID, title: String, description: String, score: Int!, type: String): GenericSearchResult
  UpdateGenericSearchResult(uuid: ID!, title: String, description: String, score: Int, type: String): GenericSearchResult
  DeleteGenericSearchResult(uuid: ID!): GenericSearchResult
  MergeGenericSearchResult(uuid: ID!, title: String, description: String, score: Int, type: String): GenericSearchResult
  CreateAuthError(key: String!, value: String!): AuthError
  UpdateAuthError(key: String!, value: String): AuthError
  DeleteAuthError(key: String!): AuthError
  MergeAuthError(key: String!, value: String): AuthError
  CreateAuthPayload(token: String, uuid: String, email: String, username: String): AuthPayload
  UpdateAuthPayload(token: String!, uuid: String, email: String, username: String): AuthPayload
  DeleteAuthPayload(token: String!): AuthPayload
  MergeAuthPayload(token: String!, uuid: String, email: String, username: String): AuthPayload
}

type Node {
  uuid: ID!
  root: Boolean
  title: String!
  description: String
  content: [String]
  childes(first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  parent(filter: _NodeFilter): Node
  isComplete: Boolean
  neighbours(first: Int, offset: Int, orderBy: [_NodeOrdering]): [Node]
  _id: String
}

type Query {
  TreeNode(uuid: ID!, filter: _TreeNodePayloadFilter): TreeNodePayload
  IsNodeFulFilled(userId: ID!, nodeId: ID!): Boolean
  NodeToRootPath(nodeId: ID!, first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  NodeNeighbours(nodeId: ID!, first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  SearchForNodesAndTags(searchString: String!, limit: Int, offset: Int, first: Int, orderBy: [_GenericSearchResultOrdering], filter: _GenericSearchResultFilter): [GenericSearchResult]
  CurrentUser(filter: _AuthPayloadFilter): AuthPayload
  GetCompletedNodes(nodeId: ID!, first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  RoadMapSearch(searchString: String!, rootId: ID!, first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  File(filename: ID, mimetype: String, encoding: String, _id: String, first: Int, offset: Int, orderBy: [_FileOrdering], filter: _FileFilter): [File]
  Node(uuid: ID, root: Boolean, title: String, description: String, content: String, isComplete: Boolean, _id: String, first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  Tag(uuid: ID, title: String, _id: String, first: Int, offset: Int, orderBy: [_TagOrdering], filter: _TagFilter): [Tag]
  Relation(from: ID, to: ID, _id: String, first: Int, offset: Int, orderBy: [_RelationOrdering], filter: _RelationFilter): [Relation]
  TreeNodePayload(_id: String, first: Int, offset: Int, orderBy: [_TreeNodePayloadOrdering], filter: _TreeNodePayloadFilter): [TreeNodePayload]
  GenericSearchResult(uuid: ID, title: String, description: String, score: Int, type: String, _id: String, first: Int, offset: Int, orderBy: [_GenericSearchResultOrdering], filter: _GenericSearchResultFilter): [GenericSearchResult]
  AuthError(key: String, value: String, _id: String, first: Int, offset: Int, orderBy: [_AuthErrorOrdering], filter: _AuthErrorFilter): [AuthError]
  AuthPayload(token: String, uuid: String, email: String, username: String, _id: String, first: Int, offset: Int, orderBy: [_AuthPayloadOrdering], filter: _AuthPayloadFilter): [AuthPayload]
}

type Relation {
  from: ID!
  to: ID!
  _id: String
}

type Tag {
  uuid: ID!
  title: String
  for(first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  _id: String
}

type TreeNodePayload {
  nodes(first: Int, offset: Int, orderBy: [_NodeOrdering], filter: _NodeFilter): [Node]
  rels(first: Int, offset: Int, orderBy: [_RelationOrdering], filter: _RelationFilter): [Relation]
  _id: String
}

scalar Upload

scalar Void
